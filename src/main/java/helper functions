
    public Elevator.elevatorState getState(int elevatorId) {
        if (elevatorId >= 0 && elevatorId < elevators.length) {
            Elevator elevator = elevators[elevatorId];
            System.out.println(elevator.getState() + " on floor " + elevator.currentFloor + " going " + elevator.getDirection());
            return elevator.getState();
        } else {
            // Handle invalid elevator ID, such as returning a default status or throwing an exception
            return null; // Example: returning null for an invalid ID
        }
    }

    public List<Integer> getStopList(int elevatorId){
        if (elevatorId >= 0 && elevatorId < elevators.length) {
            Elevator elevator = elevators[elevatorId];
            System.out.println(elevator.getStopList());
            return elevator.getStopList();
        } else {
            // Handle invalid elevator ID, such as returning a default status or throwing an exception
            return null; // Example: returning null for an invalid ID
        }

    }
    public List<Integer> getNextUpList(int elevatorId) {
        if (elevatorId >= 0 && elevatorId < elevators.length) {
            Elevator elevator = elevators[elevatorId];
            System.out.println(elevator.getNextUpList());
            return elevator.getNextUpList();
        } else {
            // Handle invalid elevator ID, such as returning a default status or throwing an exception
            return null; // Example: returning null for an invalid ID
        }
    }
    public String getDirection(int elevatorId){
        if (elevatorId >= 0 && elevatorId < elevators.length) {
            Elevator elevator = elevators[elevatorId];
            System.out.println(elevator.getDirection());
            return elevator.getDirection();
        } else {
            // Handle invalid elevator ID, such as returning a default status or throwing an exception
            return null; // Example: returning null for an invalid ID
        }

    }

    /*
        public static void main(String[] args) {
            int numElevators = 2; // Number of elevators
            ElevatorSubsystem elevatorSubsystem = new ElevatorSubsystem(numElevators);
            //elevatorSubsystem.receiveAndScheduleRequests();




            // Example usage: control elevator 0

            elevatorSubsystem.addStops(4,1,"Down",0);
            elevatorSubsystem.addStops(2,4,"Up", 0);
            //elevatorSubsystem.getStopList(0);
            //elevatorSubsystem.getState(0);

            elevatorSubsystem.addStops(5,4,"Down",1);
            elevatorSubsystem.addStops(4,2, "Down", 1);
            elevatorSubsystem.addStops(1,3,"Up", 1);
            elevatorSubsystem.getInfo();
            //elevatorSubsystem.addStops(2,4,"Up", 1);
            //elevatorSubsystem.getStopList(1);
            //elevatorSubsystem.getState(1);

     */